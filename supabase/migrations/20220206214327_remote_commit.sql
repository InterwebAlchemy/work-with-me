-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.featured_users(
	user_count integer DEFAULT 5)
    RETURNS TABLE(username character varying) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

begin
  return QUERY
    select
      public.profiles.username
    FROM
      public.profiles
    LIMIT (user_count);
end
$BODY$;

ALTER FUNCTION public.featured_users(integer)
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO anon;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO authenticated;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO postgres;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO service_role;

GRANT EXECUTE ON FUNCTION public.featured_users(integer) TO supabase_admin;

CREATE OR REPLACE FUNCTION public.handle_new_user()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
AS $BODY$
begin
  INSERT INTO public.profiles (id, username, avatar_url)
  values (
    new.id,
    new.raw_user_meta_data ->> 'preferred_username',
    new.raw_user_meta_data ->> 'avatar_url'
  )
  ON CONFLICT (id) 
  DO 
    UPDATE SET
      username = new.raw_user_meta_data ->> 'preferred_username',
      avatar_url = new.raw_user_meta_data ->> 'avatar_url';
  return new;
end;
$BODY$;

ALTER FUNCTION public.handle_new_user()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO anon;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO postgres;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO authenticated;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.handle_new_user() TO service_role;

CREATE TABLE IF NOT EXISTS public.personality_types
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_archived boolean DEFAULT false,
    url text COLLATE pg_catalog."default",
    type character varying COLLATE pg_catalog."default",
    CONSTRAINT personality_types_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.personality_types
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.personality_types
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.personality_types TO anon;

GRANT ALL ON TABLE public.personality_types TO authenticated;

GRANT ALL ON TABLE public.personality_types TO postgres;

GRANT ALL ON TABLE public.personality_types TO service_role;

GRANT ALL ON TABLE public.personality_types TO supabase_admin;
CREATE POLICY "Personality Types are viewable by everyone."
    ON public.personality_types
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Psychometrics are viewable by everyone."
    ON public.personality_types
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TABLE IF NOT EXISTS public.enneagram_types
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",
    is_archived boolean DEFAULT false,
    "number" smallint,
    CONSTRAINT enneagram_types_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.enneagram_types
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.enneagram_types
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.enneagram_types TO anon;

GRANT ALL ON TABLE public.enneagram_types TO authenticated;

GRANT ALL ON TABLE public.enneagram_types TO postgres;

GRANT ALL ON TABLE public.enneagram_types TO service_role;

GRANT ALL ON TABLE public.enneagram_types TO supabase_admin;
CREATE POLICY "Enneagrams are viewable by everyone."
    ON public.enneagram_types
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Psychometrics are viewable by everyone."
    ON public.enneagram_types
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TABLE IF NOT EXISTS public.personality_colors
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name character varying COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",
    is_archived boolean DEFAULT false,
    CONSTRAINT personality_color_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.personality_colors
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.personality_colors
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.personality_colors TO anon;

GRANT ALL ON TABLE public.personality_colors TO authenticated;

GRANT ALL ON TABLE public.personality_colors TO postgres;

GRANT ALL ON TABLE public.personality_colors TO service_role;

GRANT ALL ON TABLE public.personality_colors TO supabase_admin;
CREATE POLICY "Personality Colors are viewable by everyone."
    ON public.personality_colors
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Psychometrics are viewable by everyone."
    ON public.personality_colors
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TABLE IF NOT EXISTS public.profiles
(
    id uuid NOT NULL,
    username character varying COLLATE pg_catalog."default" NOT NULL,
    avatar_url character varying COLLATE pg_catalog."default",
    website character varying COLLATE pg_catalog."default",
    communication_style character varying COLLATE pg_catalog."default",
    personality_type_id bigint,
    enneagram_type_id bigint,
    personality_color_id bigint,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_username_key UNIQUE (username),
    CONSTRAINT profiles_enneagram_type_id_fkey FOREIGN KEY (enneagram_type_id)
        REFERENCES public.enneagram_types (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT profiles_personality_color_id_fkey FOREIGN KEY (personality_color_id)
        REFERENCES public.personality_colors (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT profiles_personality_type_id_fkey FOREIGN KEY (personality_type_id)
        REFERENCES public.personality_types (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.profiles
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.profiles
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;

GRANT ALL ON TABLE public.profiles TO supabase_admin;
CREATE POLICY "Public profiles are viewable by everyone."
    ON public.profiles
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "Users can insert their own profile."
    ON public.profiles
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can update own profile."
    ON public.profiles
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = id));
